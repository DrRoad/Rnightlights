% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nightlights.R
\name{processNtLts}
\alias{processNtLts}
\title{Downloads nightlight tiles and country polygons and calls the function to process them}
\usage{
processNtLts(ctryCodes = getAllNlCtryCodes("all"),
  nlYearMonths = getAllNlYears(), nlType = "VIIRS",
  stats = pkgOptions("stats"))
}
\arguments{
\item{ctryCodes}{the list of countries to be processed}

\item{nlYearMonths}{the concatenated year+month(s) to be processed e.g. ""201205"}

\item{nlType}{the type of nightlights to process i.e. "OLS" or "VIIRS". Default "VIIRS"}

\item{stats}{the statistics to calculate. If not provided will calculate the stats specified 
in \code{pkgOptions("stats")}}
}
\value{
None
}
\description{
Downloads nightlight tiles and country polygons in preparation for the appropriate functions
    to process them. Given a list of countries and nlYearMonths and an nlType, processNtLts 
    will first determine which countries and periods do not actually have data i.e. have not 
    been previously processed. From the list of countries and prediods that need processing,
    it determines which nightlight tiles require to be downloaded. At the same time, it 
    downloads any country polygons which have not already been downloaded.
}
\details{
processNtLts then calls the appropriate function to process the data depending on the type 
    of nightlights. i.e. OLS = processNlCountryOLS and VIIRS = processNlCountryVIIRS

This is the main entry-point to the package and the main user-facing function. However, it 
    works in batch mode and caches all data without returning any data to the user. However, it 
    will return TRUE/FALSE depending on whether it completed successfully. Since it saves state
    regularly it can be run multiply in case of failure until it finally returns TRUE. This is where 
    the only constraints are downloading and processing errors due to bandwidth or other 
    resource constraints. A good example is running a long-running batch on an AWS EC2 
    spot-priced machine where the server may be decommissioned at any time. See more in the examples.
}
\examples{

#Example 1: process VIIRS nightlights for all countries and all periods available e.g. to create 
    a local cache or repo
    
    #Recommend running initNtLts() to improve performance. It stores some global variables 
    so that they do not have to be re-evaluated multiply
    initNtLts() 
    
    processNtLts() #process VIIRS nightlights for all countries and all periods

#Example 2: process nightlights for all countries in 2012 only
    
    initNtLts() #for performance. See Example 1

    nlYrMths <- getAllNlYears() #get a list of all nightlight periods to present-day

    nlYrMths <- nlYrMths[grep("^2012", nlYrMths)] #filter only periods in 2012

    processNtLts(nlYearMonths=nlYrMths)

#Example 3: process VIIRS nightlights for countries KEN & RWA in 2014 Jan to 2014 May only
    
    initNtLts()

    cCodes <- c("KEN", "RWA")

    nlYrMths <- getAllNlYears()

    nlYrMths <- nlYrMths[grep("^20120[1-5]", nlYrMths)]

    processNtLts(ctryCodes=cCodes, nlYearMonths=nlYrMths)

#Example 4: process VIIRS nightlights for countries KEN & RWA in 2014 Oct to 2014 Dec only

    processNtLts(ctryCodes=c("KEN", "RWA"), nlYearMonths=c("201410", "201411", "201412"))
    
#Example 5: process all nightlights, all countries, all stats in one thread

   processNtLts() 
   
#Example 6: process all nightlights, all countries, all stats with each
#   year in a separate thread. Create a separate R script for each year as follows:

    library(Rnightlights)

    initNtLts()

    nlYearMonths <- getAllNlYears()

    nlYearMonths_2012 <- nlYearMonths[grep("^2012", nlYearMonths)]

    processNtLts(nlYearMonths=nlYearMonths_2012)

    #Run the script from the command line as:
    
    #R CMD BATCH script_name_2012.R
    
}

